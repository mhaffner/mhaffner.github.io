<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matthew Haffner on Matthew Haffner</title>
    <link>https://mhaffner.github.io/</link>
    <description>Recent content in Matthew Haffner on Matthew Haffner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2018 Matthew Haffner</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pi-hole troubleshooting: An overview of my recent installation</title>
      <link>https://mhaffner.github.io/post/pi-hole-troubleshooting/</link>
      <pubDate>Thu, 10 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/post/pi-hole-troubleshooting/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;My first Pi-hole installation was a pain mostly due to self-inflicted
issues. That said there are a few disjointed steps, and my lack of
networking knowledge will necessitate a future reference to more a
in-depth guide than what&amp;rsquo;s currently available. This post serves as
self-documentation on what went wrong so that I (or others) can avoid
problems in future installations.&lt;/p&gt;

&lt;h1 id=&#34;network-issues&#34;&gt;Network issues&lt;/h1&gt;

&lt;p&gt;After initial installation, I could not access the Pi-hole admin page
nor the internet. Soon after, I couldn&amp;rsquo;t access wifi on any of my
devices. I&amp;rsquo;m not 100% sure what the problem was, but I have a hunch -
After installation I needed to access my router&amp;rsquo;s configuration page,
but I couldn&amp;rsquo;t remember how. This has happened before, and I just
needed to figure out my router&amp;rsquo;s brand and Google &amp;ldquo;Access router
configuration for &amp;lt;brand&amp;gt;&amp;rdquo;. When I did this, I think I may have hit
the wifi button on router (it doesn&amp;rsquo;t help that my modem sits atop my
router) and unknowingly &lt;strong&gt;turned the wifi off manually&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After a couple hours of troubleshooting, I uninstalled Pi-hole only to
later discover that that the wifi button on the router had been
switched off. However, I still could not access the internet on my Pi!
Here is what ended up enabling me to connect to the internet again:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From this &lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=158142&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;, I
put the following in &lt;code&gt;/etc/network/interfaces&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;    auto lo
    iface lo inet loopback
    
    auto eth0
    iface eth0 inet manual
    
    allow-hotplug wlan0
    iface wlan0 inet manual
        wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
    
    allow-hotplug wlan1
    iface wlan1 inet manual
        wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;And from this
&lt;a href=&#34;https://www.raspberrypi.org/forums/viewtopic.php?t=158142&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;, I put the
following in &lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;    # A sample configuration for dhcpcd.
    # See dhcpcd.conf(5) for details.
    
    # Allow users of this group to interact with dhcpcd via the control socket.
    #controlgroup wheel
    
    # Inform the DHCP server of our hostname for DDNS.
    hostname
    
    # Use the hardware address of the interface for the Client ID.
    clientid&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Through the Pi-hole installation a bunch of options were inserted into
&lt;code&gt;/etc/dhcpcd.conf&lt;/code&gt;, and I think this was the root of the issue (of not
being able to connect to the internet).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;After this I ran&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;sudo ifdown wlan0
sudo ifup wlan0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and I was able to connect to the web again.&lt;/p&gt;

&lt;p&gt;Yet, my re-install of Pi-hole failed, and I found a working solution
through an &lt;a href=&#34;https://github.com/pi-hole/pi-hole/issues/1919&#34; target=&#34;_blank&#34;&gt;issue on GitHub&lt;/a&gt;. I uninstalled a few things with&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;    sudo apt-get remove lighttpd dnsmasq dnsmasq-base&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and removed &lt;code&gt;/etc/pihole/&lt;/code&gt;, &lt;code&gt;/etc/.pihole&lt;/code&gt;, and &lt;code&gt;/var/www/html/admin&lt;/code&gt;.
I then re-installed Pi-hole successfully and confirmed that I could
still access wifi (both from my Pi and from other devices).&lt;/p&gt;

&lt;h1 id=&#34;post-installation&#34;&gt;Post installation&lt;/h1&gt;

&lt;p&gt;Next, I followed &lt;a href=&#34;https://discourse.pi-hole.net/t/how-do-i-configure-my-devices-to-use-pi-hole-as-their-dns-server/245&#34; target=&#34;_blank&#34;&gt;Step 3&lt;/a&gt; from the official guide titled &amp;ldquo;How do I
configure my devices to use Pi-hole as their DNS server?&amp;ldquo;, but my
DHCP/DNS settings look quite different from the guide. I have a
Netgear router, and from its configuration page I had to make changes
in two locations.&lt;/p&gt;

&lt;p&gt;Since I did not modify the default static IP address during
installation and was met with a warning about potential IP address
conflicts, I had to add an address reservation under &lt;code&gt;ADVANCED -&amp;gt; LAN
Setup&lt;/code&gt; for the Pi. In my case, this was &lt;code&gt;192.168.1.3&lt;/code&gt;. Then, I had to
change the DNS from one automatically configured by the ISP to newly
reserved IP address of the Pi. From the &amp;ldquo;Domain Name Server (DNS)
Address&amp;rdquo; heading under &lt;code&gt;ADVANCED -&amp;gt; Setup -&amp;gt; Internet Setup&lt;/code&gt;, I
checked the option titled &amp;ldquo;Use these DNS Servers&amp;rdquo; and the previously
list IP. I applied the settings, and the rest was gravy.&lt;/p&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Once I got a grip on what was going on, Pi-hole really was easy to
install (props to the creators for a seamless process with a nice
installer). I doubt that others&amp;rsquo; problems will be as self-inflicted as
mine, but judging by the number of posts addressing Pi-hole issues on
Raspberry Pi forums and Stack Exchange, it seems like issues do arise
from time to time. Well self, see you in a year or so! You owe me
(i.e. yourself) a beer for writing this up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Doing useful things with Emacs Lisp</title>
      <link>https://mhaffner.github.io/post/useful-emacs-lisp/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/post/useful-emacs-lisp/</guid>
      <description>

&lt;p&gt;I wrote this post to demonstrate how I&amp;rsquo;m using Emacs Lisp to do some useful
things. This is post aimed at beginners and those interested (e.g., Vim users
potentially) in how Emacs can be extended to automate some simple tasks.
Advanced users will probably have more elegant (or more complete) solutions than
what I have here,&lt;sup&gt;1&lt;/sup&gt; so with that in mind I will focus more on the
motivations, thought processes, and progressions I&amp;rsquo;ve gone through with these
functions. I also discuss some future directions and how these functions could
be improved.&lt;/p&gt;

&lt;p&gt;About a year ago I made a point to complete the built-in Emacs Lisp tutorial.
For those looking for a good place to start with Emacs Lisp, this is undoubtedly
it. It&amp;rsquo;s one of the best programming tutorials I&amp;rsquo;ve ever gone through, and I
thoroughly enjoyed it. While navigating through the tutorial, I created a .org
file with subsections for each chapter and individual code blocks for each set
of examples/exercise. I frequently go to this file to find snippets, and I often
find this more effective than Googling solutions.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The functions below and all associated code are in my dotfile which can be found
in &lt;a href=&#34;https://github.com/mhaffner/dotfiles&#34; target=&#34;_blank&#34;&gt;this repo&lt;/a&gt;. Note that I&amp;rsquo;m using
Spacemacs, hence the associated keybindings and Vim-like conventions.&lt;/p&gt;

&lt;h1 id=&#34;open-html-firefox&#34;&gt;open-html-firefox&lt;/h1&gt;

&lt;p&gt;I created this function since I often render .org and .Rmd files into .html
files within Emacs. Then, I use the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:! firefox my-newly-rendered-file.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to open the file in a browser. Once the .html file is open, it can simply be
refreshed to reflect any changes. But, I often use Emacs as a navigation tool
(e.g., &lt;code&gt;SPC f f&lt;/code&gt;; i.e. &lt;code&gt;lazy-helm/spacemacs/helm-find-files&lt;/code&gt;) by first opening a
.org or .Rmd in Emacs, then opening the .html in a browser with a command like
the one above. This becomes tedious since most materials I create for courses
(syllabi, assignments, handouts, discussion questions, etc.) are served as .html
files, and I have to open these all the time. I could open the &lt;em&gt;.html&lt;/em&gt; file in
Emacs instead and then use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:! firefox %
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but the .html files created by &lt;code&gt;org-reveal&lt;/code&gt; (a very nice package) are quite
large and cause Emacs to hang. So, I sought to create something that would (a)
get the full file path to the current buffer and strip the extension, (b) slap
&amp;ldquo;.html&amp;rdquo; to the end of this string, (c) open the file in Firefox, and (d)
assign this function to a keybinding. Here is what I came up with:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-EmacsLisp&#34; data-lang=&#34;EmacsLisp&#34;&gt;(defun open-html-firefox ()

  (interactive)

  &lt;span style=&#34;color:#75715e&#34;&gt;; create the new string of the file to open&lt;/span&gt;
  (setq file-string (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; (file-name-sans-extension (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-file-name&lt;/span&gt;)) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.html&amp;#34;&lt;/span&gt;))

  &lt;span style=&#34;color:#75715e&#34;&gt;; execute command&lt;/span&gt;
  (shell-command (&lt;span style=&#34;color:#a6e22e&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;firefox &amp;#34;&lt;/span&gt; file-string)))


  &lt;span style=&#34;color:#75715e&#34;&gt;; assign this function to a keybinding in markdown mode&lt;/span&gt;
  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;markdown-mode-hook&lt;/span&gt;
    (lambda ()
      (local-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open-html-firefox&lt;/span&gt;)))

  &lt;span style=&#34;color:#75715e&#34;&gt;; assign this function to a keybinding in org mode&lt;/span&gt;
  (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode-hook&lt;/span&gt;
            (lambda ()
              (local-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c f&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open-html-firefox&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In my dotfile, the function has documentation, but I removed it for this post
since I&amp;rsquo;m explaining everything in detail. The function itself is quite short
and consists of mainly two things: (a) creating a variable called
&lt;code&gt;file-string&lt;/code&gt;&lt;sup&gt;3&lt;/sup&gt; and (b) opening this string (which is an .html
file) in Firefox with a command.&lt;/p&gt;

&lt;p&gt;Originally I was using&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt; (setq file-string (replace-regexp-in-string &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\.Rmd&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.html&amp;#34;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;buffer-file-name&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to create the string, but this obviously only works for .Rmd files. Also, I was
not initially aware of the &lt;code&gt;file-name-sans-extension&lt;/code&gt; function which turned out
to be much easier than what I was doing anyway.&lt;/p&gt;

&lt;p&gt;The two &lt;code&gt;add-hook&lt;/code&gt;&amp;rsquo;s just assign &lt;code&gt;open-html-firefox&lt;/code&gt; to keybindings in
&lt;code&gt;markdown-mode&lt;/code&gt; and &lt;code&gt;org-mode&lt;/code&gt;. The reason why I use lambdas is because the
internet told me to;&lt;sup&gt;4&lt;/sup&gt; lo and behold, it doesn&amp;rsquo;t work without lambdas.
It is possible to assign this function to a global keybinding, but I don&amp;rsquo;t want
to override keybindings on other modes. Something like &lt;code&gt;C-c f&lt;/code&gt; is common enough
that I assume it&amp;rsquo;s being used elsewhere.&lt;/p&gt;

&lt;p&gt;What would be even better (and simpler) is a function/keybinding that opens a
file under point directly from &lt;code&gt;helm-find-files&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;add-src-elements&#34;&gt;add-src-elements&lt;/h1&gt;

&lt;p&gt;This function adds the text&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to the current buffer and places the cursor just after &amp;ldquo;#+BEGIN_SRC&amp;rdquo;. This block
structure is used to embed code .org files, which I use to create presentations.
For example, a block may contain something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#+BEGIN_SRC python
import numpy
import scipy

x = &#39;Emacs Rocks&#39; # i hope this phrase isn&#39;t trademarked
#+END_SRC
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Manually typing &lt;code&gt;#+BEGIN_SRC...&lt;/code&gt;, etc. etc. is tedious, so I simply created a
function and keybinding to automate this. Here it is:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;(defun add-src-elements ()
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Make adding #+BEGIN/END _SRC elements easier&amp;#34;&lt;/span&gt;
    (interactive)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#+BEGIN_SRC\n#+END_SRC&amp;#34;&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;forward-line&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;)
    (evil-append-line &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    (&lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;))
    
  &lt;span style=&#34;color:#75715e&#34;&gt;; set it to a keybinding&lt;/span&gt;
  (with-eval-after-load &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org&lt;/span&gt;
    (add-hook &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org-mode-hook&lt;/span&gt;
              (lambda ()
                (local-set-key (kbd &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C-c s&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add-src-elements&lt;/span&gt;)))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My dotfile looks a little different since I have other &lt;code&gt;org-mode&lt;/code&gt; hooks, but
this is the gist of it. Again, the internet insists I use
&lt;code&gt;with-eval-after-load&lt;/code&gt;,&lt;sup&gt;4&lt;/sup&gt; so I obey. This could be improved by looking
for a previous codeblock (i.e. &lt;code&gt;search-backward&lt;/code&gt;) in the current buffer if one
exists, getting the language used for the block if it&amp;rsquo;s listed (Python in my
example), and inserting this language name just after &lt;code&gt;#+BEGIN_SRC&lt;/code&gt;. In most
presentations I only demonstrate concepts in one language, so it would make
sense to use the previous source block&amp;rsquo;s language if it is listed.&lt;/p&gt;

&lt;h1 id=&#34;emacs-lisp-programming-strats&#34;&gt;Emacs Lisp programming strats&lt;/h1&gt;

&lt;p&gt;When using Emacs Lisp, I&amp;rsquo;ve often had difficultly locating proper functions to
do simple things. For example, in my second function, &lt;code&gt;add-src-elements&lt;/code&gt;, I
utilize &lt;code&gt;(forward-line -1)&lt;/code&gt;, which serves to move the cursor to the previous
line. This is something we do all the time in text editors manually. As a
Spacemacs user, for example, I use &lt;code&gt;j&lt;/code&gt;/&lt;code&gt;k&lt;/code&gt; to navigate between single lines.
This is where a beautiful feature of Emacs is exposed: &lt;code&gt;describe-key&lt;/code&gt;, which
will show the function called by any keybinding. To find out what function is
called by &lt;code&gt;k&lt;/code&gt; (which navigates to the previous line in &lt;code&gt;evil-mode&lt;/code&gt;), I use &lt;code&gt;C-h
k&lt;/code&gt; to call &lt;code&gt;describe-key&lt;/code&gt;, and then I simply press &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The function appearing in the help buffer is called &lt;code&gt;evil-previous-line&lt;/code&gt;. While
this wasn&amp;rsquo;t what I used directly in my custom function, this process often
points me to the function I need. Similar useful features include
&lt;code&gt;describe-function&lt;/code&gt; and &lt;code&gt;describe-variable&lt;/code&gt;. All of these &lt;code&gt;describe-&lt;/code&gt; functions
contain links to the source code, which demonstrate what&amp;rsquo;s going on under the
hood.&lt;/p&gt;

&lt;h1 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h1&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; Please do share if you have better solutions!&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; Which is baffling.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; Using &lt;code&gt;let&lt;/code&gt; would probably be a better approach than &lt;code&gt;setq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; A Spacemacs requirement?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A place-based analysis of #BlackLivesMatter and counter-protest content on Twitter</title>
      <link>https://mhaffner.github.io/publication/blm-tweets/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/publication/blm-tweets/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A spatial analysis of non-English Twitter activity in Houston, TX</title>
      <link>https://mhaffner.github.io/publication/non-english-tweets/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/publication/non-english-tweets/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A spatial analysis of non-English Twitter activity in Houston, TX</title>
      <link>https://mhaffner.github.io/talk/non-english-tweets/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 -0600</pubDate>
      
      <guid>https://mhaffner.github.io/talk/non-english-tweets/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Location-based social media behaviors and perception: Views of university students</title>
      <link>https://mhaffner.github.io/talk/lbsm-survey/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 -0500</pubDate>
      
      <guid>https://mhaffner.github.io/talk/lbsm-survey/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Why I switched from Ubuntu to Manjaro (Arch Linux derivative)</title>
      <link>https://mhaffner.github.io/post/arch-linux/</link>
      <pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/post/arch-linux/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;EDIT: I&amp;rsquo;ve made several modifications to the original piece based on helpful
comments from reddit users &lt;em&gt;newworkaccount&lt;/em&gt;, &lt;em&gt;iKnitYogurt&lt;/em&gt;, &lt;em&gt;jprada&lt;/em&gt;, and
&lt;em&gt;ThisTimeIllSucceed&lt;/em&gt; on the
thread
&lt;a href=&#34;https://www.reddit.com/r/ManjaroLinux/comments/6n6mao/why_i_switched_from_ubuntu_to_manjaro/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
View the original post in its full glory/shame
on
&lt;a href=&#34;https://github.com/mhaffner/personal-website-hugo/blob/master/content/post/arch-linux.md&#34; target=&#34;_blank&#34;&gt;Github&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Like everyone else, when I first started using GNU/Linux I gravitated toward
Ubuntu.  While using Ubuntu, I sought to try other distributions and briefly
used Fedora, Elementary OS, and Debian. With all of these distributions &amp;ndash;
including Ubuntu &amp;ndash; I came across a very similar problem: having to manually add
software repositories to get programs that were more up-to-date than the package
manager&amp;rsquo;s defaults. With this comes the difficulty of deriving reproducible,
purely command line solutions to installing many of my staple programs. Building
packages from source is not the end of the world, but if there was a
distribution/package manager that had a workable version (for my purposes) of
all the packages I needed, wouldn&amp;rsquo;t that be worth pursuing?&lt;/p&gt;

&lt;p&gt;Enter the Arch Linux family. Since using Manjaro (technically an Arch Linux
derivative, not Arch Linux itself nor an Arch distribution; thanks to reddit
users &lt;em&gt;newworkaccount&lt;/em&gt; and &lt;em&gt;iKnitYogurt&lt;/em&gt; for clarifying this), I&amp;rsquo;m not sure I&amp;rsquo;ve
had to build anything from source manually; I&amp;rsquo;ve installed everything with a
simple one-liner with &lt;code&gt;pacman&lt;/code&gt; or &lt;code&gt;yaourt&lt;/code&gt;. For testing purposes (and for the
sake of (re)installing systems often) it&amp;rsquo;s nice to have reproducible methods of
software installation. Aside from this, Manjaro has other really nice features
rendering it indispensable. Ubuntu has some good things going for it, and for it
I do still hold some reverence as my first true GNU/Linux experience. The purple
terminal sparks an incredible amount of nostalgia every time I see it on someone
else&amp;rsquo;s system.&lt;/p&gt;

&lt;p&gt;But I can&amp;rsquo;t go back.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; &lt;em&gt;This is an opinionated piece, and there are likely some solutions
to the problems I perceive with Ubuntu. Nevertheless, Manjaro has seemed much
more straightforward to me, and at its core, I believe it&amp;rsquo;s more user-friendly.
I do not intend this piece to be authoritative; rather, it is a description of
my journey into the Arch-related world from Ubuntu (thanks to reddit user jprada
for pointing out how this could be clarified). If I&amp;rsquo;m being unfair to Ubuntu
and/or you know of solutions to my problems, I&amp;rsquo;d love to hear about it! Drop me
a comment&lt;sup&gt;1&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The package manager for Manjaro (and Arch Linux) is called &lt;code&gt;pacman&lt;/code&gt;. Installing
multiple packages can be accomplished with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pacman -S package1 package2 package3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for example. This can, of course, be replicated with &lt;code&gt;apt&lt;/code&gt; on Ubuntu with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install package1 package2 package3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but if you have to manually add a PPA, a key, etc., this process becomes several
lines long for each package. Multi-line solutions were common for me as I often
need bleeding edge packages, and most default package versions were not up to
date enough. This process could be automated in a script, but the keys and
repositories can change. I&amp;rsquo;ve never had to add a repository manually with
Manjaro since software in the community repositories (installed with &lt;code&gt;yaourt&lt;/code&gt;)
have everything I need that the official repositories lack. Beyond this,
removing packages seems to be much easier with &lt;code&gt;pacman&lt;/code&gt; through&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pacman -R package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reddit user &lt;em&gt;ThisTimeIllSucceed&lt;/em&gt; actually suggests using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pacman -Rns package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which removes any dependencies not used by another package and any config files
for the package. On the other hand, &lt;code&gt;apt&lt;/code&gt; uses a combination of &lt;code&gt;purge&lt;/code&gt; and
&lt;code&gt;remove&lt;/code&gt;. I&amp;rsquo;m not really sure which comes first or why, and I&amp;rsquo;m not really sure
what these commands fundamentally do. I&amp;rsquo;ve so often received errors with
&lt;code&gt;apt-get update&lt;/code&gt; after removing packages that I&amp;rsquo;m left wondering if I&amp;rsquo;ve ever
used these commands correctly.&lt;/p&gt;

&lt;p&gt;Certainly the argument in favor of Ubuntu (and against Arch Linux-like
derivatives) is that packages are more stable. This is probably true on a
package-to-package basis, but I&amp;rsquo;ve had much more difficulty keeping the OS
stable &lt;em&gt;as a whole&lt;/em&gt; with Ubuntu than with Manjaro. A large part of this has to
do with distribution upgrades, which have been a pain for me on Ubuntu but
&lt;strong&gt;don&amp;rsquo;t exist&lt;/strong&gt; in Manjaro, which operates on a rolling release. Using the
command &lt;code&gt;pacman -Syu&lt;/code&gt; upgrades all on packages on the system, meaning that you
have the most up-to-date version of the OS once you upgrade packages.&lt;/p&gt;

&lt;p&gt;This feature in Manjaro (or the lack thereof in Ubuntu) was the ultimate tipping
point for me. A few months ago my graphics card died, so I bought a new one, an
AMD RX 470. I could not &lt;em&gt;for the life of me&lt;/em&gt; get it working in Ubuntu 14. After
doing some research (after I bought the card, of course), I discovered that AMD
cards don&amp;rsquo;t always work well with GNU/Linux. After trying a plethora of options,
I decided that upgrading from 14 to 16 might be my best shot. Aside from not
solving my graphics card issue, this upgrade resulted in a whole host of
packages not working correctly&lt;sup&gt;2&lt;/sup&gt;. At this point I decided to try
various Arch Linux derivatives, which have a reputation of working with a wide
range of (and often newest) hardware.&lt;/p&gt;

&lt;p&gt;There are plenty of other Arch Linux derivatives including Antergos, Apricity,
and ArchBang. Pure Arch Linux is a bit too stripped down for my liking; Manjaro
seems like a good balance between a simple, highly configurable system and one
that allows you to hit the ground running.&lt;/p&gt;

&lt;p&gt;Over time, I&amp;rsquo;ve come to the conclusion that no GNU/Linux distribution is
perfect. I still have issues with Manjaro from time to time (explained at the
conclusion of the piece), and recently I was wondering if I really gave Ubuntu a
fair shot. Did I exhaust all possible solutions in getting the RX 470 to work?
Is there a easier method to installing packages that I&amp;rsquo;m just missing? And is
&lt;code&gt;apt&lt;/code&gt; really as cryptic as I&amp;rsquo;m making it out to be? A recent adventure has
confirmed some of these suspicions.&lt;/p&gt;

&lt;p&gt;In April I released a suite of tools called &lt;code&gt;shp2nosql&lt;/code&gt; (I wrote about
it &lt;a href=&#34;https://mhaffner.github.io/post/shp2nosql&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt; and it&amp;rsquo;s on
GitHub &lt;a href=&#34;https://github.com/mhaffner/shp2nosql&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;). In a nutshell, it&amp;rsquo;s
designed to insert spatial data into NoSQL systems. I conducted all of my
initial testing on local machines running Manjaro. Before pushing the code to a
public repository on GitHub, I decided to do some testing on other GNU/Linux
distributions to ensure portability. I started with a clean instance of Ubuntu
16 in a virtual machine and installed software from the ground up. Below is the
code I used to install dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# install dependencies
sudo apt-get update
sudo apt-get install python-software-properties
sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
sudo add-apt-repository ppa:webupd8team/java # for java
sudo apt-get update
sudo apt-get install git gdal-bin curl oracle-java8-installer vim
cd ~
git clone https://github.com/mhaffner/shp2nosql ~/git-repos/shp2nosql
export PATH=$PATH:~/git-repos/shp2nosql/bin

# install and start elasticsearch
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
sudo apt-get install apt-transport-https
echo &amp;quot;deb https://artifacts.elastic.co/packages/5.x/apt stable main&amp;quot; | sudo tee -a /etc/apt/sources.list.d/elastic-5.x.list
sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install elasticsearch
## edit /etc/elasticsearch.yml and uncomment cluster.name, node.name, and network.host to 0.0.0.0
sudo systemctl enable elasticsearch.service
sudo systemctl start elasticsearch

# install and start mongodb
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
echo &amp;quot;deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse&amp;quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list
sudo apt-get update
sudo apt-get install -y mongodb-org
sudo cp ~/git-repos/shp2nosql/development/ubuntu-16.04/mongodb.service /etc/systemd/system/mongodb.service
sudo systemctl start mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What a challenge! I also had to manually alter &lt;code&gt;elasticsearch.yml&lt;/code&gt; and
&lt;code&gt;mongodb.service&lt;/code&gt; (and then save these configs for future testing) because the
default configurations were not sufficient. Compare the above code to what I
needed in Manjaro:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pacman -Syu elasticsearch mongodb wget gdal vim
sudo systemctl enable elasticsearch.service
sudo systemctl start elasticsearch
sudo systemctl start mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Way easier. And I did not have to manually alter config files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Random rambling&lt;/strong&gt;: &lt;em&gt;Some of difference in installation of dependencies is due
to the suite of pre-packaged software that comes with Manjaro; it comes with
&lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;java&lt;/code&gt; whereas Ubuntu does not. The inclusion of these extra packages
is an example of how Manjaro deviates from the pure Arch Linux philosophy, which
generally takes a DIY approach - The developers seek to create an non-bloated
experience, avoiding design decisions that force users down a specific path.
(This is not to suggest that Ubuntu would be expected to contain everything that
Arch Linux contains, of course). However, if Manjaro developers make (a) mostly
good design decisions, (b) that I can change if I want, &amp;copy; that help me get a
system up and running much faster than I could with a bare bones installation&amp;hellip;
then I&amp;rsquo;m okay with this&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s possible that users of other Arch Linux derivatives would need something
slightly different to install dependencies for &lt;code&gt;shp2nosql&lt;/code&gt;, but the general
point still stands: many one liners with &lt;code&gt;pacman&lt;/code&gt; are analogous to multi-step
processes with &lt;code&gt;apt&lt;/code&gt;. This includes the installation of &lt;code&gt;QGIS&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;, and
&lt;code&gt;Emacs&lt;/code&gt; - all of which are staple programs for me.&lt;/p&gt;

&lt;p&gt;With the confusion I&amp;rsquo;ve endured with Ubuntu, I simply can&amp;rsquo;t recommend it
anymore, especially to new users. In this piece I focused mostly on package
installation, but there are other notable features of Manjaro (and other
Arch-based distributions) that are worth mentioning here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: the Arch Wiki is incredible, much of it applies to Manjaro,
and 95%+ of my questions are answered here. I definitely cannot say the same
for Ubuntu.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Kernel installation&lt;/strong&gt;: Installing and removing kernels is trivial through
the System Settings Module (this ended up being part of the solution to using
my new GPU).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Greater privacy/freedom&lt;/strong&gt;: Many Ubuntu users may not even realize that their OS
contains
&lt;a href=&#34;https://arstechnica.com/information-technology/2012/12/richard-stallman-calls-ubuntu-spyware-because-it-tracks-searches/&#34; target=&#34;_blank&#34;&gt;&amp;ldquo;surveillance code&amp;rdquo;&lt;/a&gt;.
Searches in dashboard are transmitted to Canonical, and the company profits
when a user buys a product from Amazon using the Amazon App.&lt;sup&gt;3,4,5&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Less bloated-ness&lt;/strong&gt;: Manjaro (which is certainly more bloated than pure
Arch) feels much less bloated than Ubuntu. It has no Software Center, for
instance, and feels snappier. Knowing that Canonical transmits search data
might explain some of this new found snappiness&amp;hellip;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Other various things &lt;em&gt;just work&lt;/em&gt;&lt;/strong&gt;: For a while, my test of a well-working
GNU/Linux distribution was one with which I could install the &lt;code&gt;NSM3&lt;/code&gt; library
in &lt;code&gt;R&lt;/code&gt;. This sounds ridiculous, of course, but I could never successfully
install the library in Ubuntu or Fedora after many painstaking hours.
Installation of &lt;code&gt;NSM3&lt;/code&gt; was insignificant in Manjaro; it worked on the first
try. I&amp;rsquo;ve played games on Manjaro - Hearthstone&lt;sup&gt;6&lt;/sup&gt;, World of
Warcraft, Faster than Light - that all basically work out of the box. These
took much more additional configuration in Ubuntu.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;some-of-the-problems-i-still-find-with-manjaro&#34;&gt;Some of the problems I still find with Manjaro&lt;/h1&gt;

&lt;p&gt;As previously noted, I still haven&amp;rsquo;t found the perfect GNU/Linux distribution.
Here are problems I still find with Manjaro:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Managing my desktop settings.&lt;/strong&gt; I can&amp;rsquo;t stand point and click menus knowing
that I have to make changes manually across all of systems if I want
consistency. I want my desktop settings (keybindings, background, etc.)
version controlled through a single config file, just like my &lt;code&gt;.spacemacs&lt;/code&gt; and
&lt;code&gt;.vimrc&lt;/code&gt;. I&amp;rsquo;ve heard that i3 is a solution to this, but I don&amp;rsquo;t think I want a
tiling window manager. I like to stack windows on top of one another and
switch as I need. I really like my current Manjaro KDE setup, but it uses many
different config files that seem to change arbitrarily, so VC is a pain. Some
other simple DE could work for me, but I desperately need a launcher so that I
can easily start programs with &lt;code&gt;Super&lt;/code&gt; + &lt;code&gt;&amp;lt;program name&amp;gt;&lt;/code&gt; (which, from my
experience, is not available on LXDE, LXQT, and XFCE).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Integration of &lt;code&gt;pacman&lt;/code&gt; and &lt;code&gt;yaourt&lt;/code&gt; package management&lt;/strong&gt;: Upgrading
packages with &lt;code&gt;pacman&lt;/code&gt; is easy, but &lt;code&gt;yaourt&lt;/code&gt; is more difficult. Is it possible
to integrate these (i.e. install with &lt;code&gt;yaourt&lt;/code&gt; but upgrade with &lt;code&gt;pacman&lt;/code&gt;)?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Breakage of &lt;code&gt;yaourt&lt;/code&gt; packages&lt;/strong&gt;: This only happened to me once, but it was
pretty crippling. After a system update with &lt;code&gt;pacman&lt;/code&gt;, QGIS (installed via
&lt;code&gt;yaourt&lt;/code&gt;) broke. A forum user came up with a combination of downgrades that
got QGIS working, but downgrades are not officially supported, and I couldn&amp;rsquo;t
upgrade &lt;code&gt;pacman&lt;/code&gt; packages after this downgrade.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; This way, all thrashings of the piece are logged in one place, and
I don&amp;rsquo;t have to stumble upon them individually on Hacker News, various Reddit
pages, Twitter, and other sites!&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; To be fair, Ubuntu does throw a very Windows-esque warning stating
the upgrade my ruin your entire system.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; This was true as of December 2012 but is probably still happening.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; This privacy violation is nothing compared to what Microsoft,
Apple, and other companies are probably doing.&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;5&lt;/sup&gt; While more &amp;ldquo;libre&amp;rdquo; than Ubuntu, Arch Linux does not receive gold
stars from The Free Software Foundation&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;6&lt;/sup&gt; I occasionally have issues with my GPU on Windows still. For a time
I was playing Hearthstone through Wine on Manjaro (an unsupported OS) while
could not play at all on Windows as the game would always unexpectedly crash.
It was laughable to me that I could play the game better on an unsupported OS
than on Windows.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Location based social media behavior and perception: Views of university students</title>
      <link>https://mhaffner.github.io/publication/lbsm-survey/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/publication/lbsm-survey/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GIS-based modeling of tornado siren sound propagation: Refining spatial extent and coverage estimations</title>
      <link>https://mhaffner.github.io/publication/tornado-sirens/</link>
      <pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/publication/tornado-sirens/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The development of shp2nosql</title>
      <link>https://mhaffner.github.io/post/shp2nosql/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/post/shp2nosql/</guid>
      <description>&lt;p&gt;In the early days of my dissertation, I was collecting Twitter data but had no
idea how to store, manage, or query these data. First, I tried PostgreSQL with
PostGIS. I had been wanting to learn PostGIS anyway, not to mention a suitable
alternative to MS SQL Server. After learning PostGIS&amp;rsquo;s intricacies, I soon found
it was unsuitable for my needs. After some searching, I stumbled upon MongoDB.&lt;/p&gt;

&lt;p&gt;Subsequently, I started using MongoDB to handle my data. Working with MongoDB
requires at least &lt;em&gt;some&lt;/em&gt; knowledge of JavaScript, which I was wanting to learn
anyway, so I didn&amp;rsquo;t mind this switch. This worked somewhat better than
PostgreSQL since MongoDB is good at handling semi-structured data (like those
from Twitter), but sharding was not intuitive, inserting spatial data was
difficult, and queries were still slow. At the &lt;em&gt;CyberGIS and GeoSpatial Data
Science&lt;/em&gt; conference/workshop at the University of Illinois in the summer of
2016, I was introduced to Elasticsearch.&lt;/p&gt;

&lt;p&gt;So I started using Elasticsearch to handle my data. After many painstaking
attempts to index geographic data in Elasticsearch, I was becoming concerned
that I&amp;rsquo;d spend the next several years trying a never-ending list of databases,
learning new skills, drowning in the digital sea&amp;hellip;.. and never complete my
dissertation. Thankfully, with the help
of
&lt;a href=&#34;https://www.gitbook.com/book/mapbutcher/using-spatial-data-in-elasticsearch/details&#34; target=&#34;_blank&#34;&gt;MapButcher&amp;rsquo;s tutorial&lt;/a&gt;,
I was finally able to index my data and perform spatial queries in a reasonable
amount of time.&lt;/p&gt;

&lt;p&gt;My search for a suitable database stopped after three. This process was
incredibly valuable in that I learned many new skills and created some useful
tools for myself, but ten months had elapsed before I found a suitable workflow.
I thought, &lt;em&gt;What about researchers who don&amp;rsquo;t have ten months to spare learning
the intricacies of multiple databases&lt;/em&gt;? I now had three different workflows for
working with spatially enabled databases, but each was somewhat clunky. Since I
knew I&amp;rsquo;d be working with Elasticsearch for quite some time, it was in my best
interest to create something more efficient. If I could make a generalizable
tool, others could benefit from it and avoid some of the mishaps I encountered
along the way. Combine these elements with my need to present something at the
&lt;em&gt;AAG Annual Meeting&lt;/em&gt; (and save dissertation article presentations for later),
and the stars had wonderfully aligned. I decided to create a software tool to
aid geographers in inserting/indexing spatial data.&lt;/p&gt;

&lt;p&gt;There really was no need to create a &lt;em&gt;shapefile to PostGIS&lt;/em&gt; tool, since it
already exists: &lt;code&gt;shp2pgsql&lt;/code&gt;. What I needed (and sought to create) was the NoSQL
equivalent, which I call &lt;code&gt;shp2nosql&lt;/code&gt;. Currently it works with Elaticsearch and
MongoDB, but I&amp;rsquo;d love others to contribute and make the tool more robust,
suggest new features, and possibly support more databases. Technical details can
be found on my GitHub page &lt;a href=&#34;https://github.com/mhaffner/shp2nosql&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;, and
the presentation I delivered at the AAG Annual Meeting can be
found &lt;a href=&#34;https://mhaffner.github.io/presentations/shp2nosql.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Burnination of the Wordpress</title>
      <link>https://mhaffner.github.io/post/first-post/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mhaffner.github.io/post/first-post/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m currently in the process of moving my blog to GitHub pages. I&amp;rsquo;m
doing this for several reasons:&lt;/p&gt;

&lt;h1 id=&#34;1-ease-of-creating-publishing-posts&#34;&gt;(1) Ease of creating/publishing posts&lt;/h1&gt;

&lt;p&gt;On my first few Wordpress posts I typed content directly in Wordpress.
I didn&amp;rsquo;t mind this at the time, but eventually I started using Emacs
&lt;code&gt;org-mode&lt;/code&gt; for all writing, including research papers, blog posts,
etc. After a semi-debacle of copying an html-exported &lt;code&gt;org&lt;/code&gt; file into
Wordpress, I never posted again. This manual labor approach did not
appeal to me. I discovered that I could host a blog through GitHub
pages and simply push a &lt;code&gt;.md&lt;/code&gt; file to a repository (much like I was
already doing with code repositories) to create a post. This is much,
much easier than what I was doing with Wordpress before. I&amp;rsquo;m still in
the process of figuring out how to use &lt;code&gt;org-mode&lt;/code&gt; on here, but I&amp;rsquo;ll be
there soon :)&lt;/p&gt;

&lt;h1 id=&#34;2-version-control&#34;&gt;(2) Version control&lt;/h1&gt;

&lt;p&gt;I have the unfortunate habit of nuking everying I do pretty regularly,
and git makes me forgive myself exceedingly quicker than before.&lt;/p&gt;

&lt;h1 id=&#34;3-less-corporate-control-profit-whatever&#34;&gt;(3) Less corporate control/profit/whatever&lt;/h1&gt;

&lt;p&gt;No more ads. More control for me. No longer do I get sick when I inadvertently
see options to &lt;em&gt;pay&lt;/em&gt; for Wordpress themes thinking about all the innocent people
who have willingly done this (now that I know about Jekyll). &lt;strong&gt;EDIT&lt;/strong&gt;: So I
found out that there are plenty of Jekyll themes you can pay for too. But I can
still avoid seeing this easier on GitHub pages. And I have more control this way.&lt;/p&gt;

&lt;h1 id=&#34;4-easier-to-reflect-changes-to-my-cv&#34;&gt;(4) Easier to reflect changes to my CV&lt;/h1&gt;

&lt;p&gt;Nothing wrong with a little self-promotion on a personal blog, right? With
Wordpress I had to upload my new CV through the web interface &lt;em&gt;every time&lt;/em&gt; I
made a change (which is quite often). I&amp;rsquo;m still working on this, but I plan on
creating a symbolic link from my CV repository here, so all I&amp;rsquo;ll have to do is
push the changes to this repository when I update my CV.
&lt;strong&gt;EDIT&lt;/strong&gt;: I&amp;rsquo;m now doing this with hard links. Setting it up was pretty easy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The development of shp2nosql: Command line tools for spatial data and NoSQL databases</title>
      <link>https://mhaffner.github.io/talk/shp2nosql/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 -0600</pubDate>
      
      <guid>https://mhaffner.github.io/talk/shp2nosql/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
